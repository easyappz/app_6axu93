openapi: 3.0.0
info:
  title: Avitolog API
  version: 0.1.0
servers:
  - url: /
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Validation error
        '409':
          description: Email already registered
  /auth/login:
    post:
      summary: Login with email and password
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials
  /auth/me:
    get:
      summary: Get current user profile
      tags: [auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      created_at:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized
  /listings/ingest:
    post:
      summary: Ingest an Avito listing by URL (create if not exists)
      tags: [listings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Listing created or returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  listing:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Failed to parse or invalid data
  /listings:
    get:
      summary: Get listings sorted by views
      tags: [listings]
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [views]
          example: views
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                  total:
                    type: integer
  /listings/{id}:
    get:
      summary: Get listing by ID (increments view_count)
      tags: [listings]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Listing details
          content:
            application/json:
              schema:
                type: object
                properties:
                  listing:
                    $ref: '#/components/schemas/Listing'
        '404':
          description: Listing not found
  /listings/{id}/comments:
    get:
      summary: Get comments for listing
      tags: [comments]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '404':
          description: Listing not found
    post:
      summary: Create a comment for listing (auth required)
      tags: [comments]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 5000
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '404':
          description: Listing not found
  /comments/{id}:
    patch:
      summary: Update comment (author only)
      tags: [comments]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 5000
      responses:
        '200':
          description: Updated comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the author)
        '404':
          description: Comment not found
    delete:
      summary: Delete comment (author only)
      tags: [comments]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not the author)
        '404':
          description: Comment not found
  /media/{path}:
    get:
      summary: Serve media files
      tags: [media]
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: Relative media path like 'listings/<filename>'
      responses:
        '200':
          description: Binary file
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: File not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    Listing:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        title:
          type: string
        image_url:
          type: string
          nullable: true
          description: "/media/... path to image"
        view_count:
          type: integer
        created_at:
          type: string
          format: date-time
    Author:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
          nullable: true
    Comment:
      type: object
      properties:
        id:
          type: integer
        listing_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/Author'
        is_owner:
          type: boolean
